{
    "git": {
      "branch": {
        "list": "git branch",
        "create": "git branch <branch-name>",
        "switch": "git checkout <branch-name>",
        "create and switch to a new branch": "git checkout -b <branch-name>",
        "rename a branch": "git branch -m <old-name> <new-name>",
        "delete a local branch": "git branch -d <branch-name>",
        "delete a remote branch": "git push origin --delete <branch-name>",
        "list remote branches": "git branch -r",
        "list all branches (local and remote)": "git branch -a"
      },
      "commit": {
        "stage changes": "git add <file-path>",
        "commit changes": "git commit -m 'commit message'",
        "amend the last commit": "git commit --amend",
        "show commit history": "git log",
        "show changes between commits": "git diff <commit1> <commit2>",
        "revert a commit": "git revert <commit-id>",
        "reset to a specific commit (hard reset)": "git reset --hard <commit-id>"
      },
      "merge conflicts": {
        "merge a branch into the current branch": "git merge <branch-name>",
        "resolve merge conflicts": "Manually edit conflicted files, then run git add <file-path> and git commit",
        "abort a merge": "git merge --abort",
        "view merge conflicts": "git status"
      },
      "remote management": {
        "add a remote repository": "git remote add origin <remote-url>",
        "view remote repositories": "git remote -v",
        "fetch changes from a remote repository": "git fetch",
        "pull changes from a remote repository": "git pull",
        "push changes to a remote repository": "git push"
      },
      "tagging": {
        "list tags": "git tag",
        "create a new tag": "git tag <tag-name>",
        "delete a tag": "git tag -d <tag-name>",
        "push a tag to the remote": "git push origin <tag-name>",
        "delete a remote tag": "git push origin --delete <tag-name>"
      },
      "stashing": {
        "stash changes": "git stash",
        "apply stashed changes": "git stash apply",
        "list stashed changes": "git stash list",
        "drop a stash": "git stash drop <stash@{n}>",
        "clear all stashes": "git stash clear",
        "clean untracked files": "git clean -f"
      },
      "rebasing": {
        "rebase the current branch onto another branch": "git rebase <branch-name>",
        "continue a rebase after resolving conflicts": "git rebase --continue",
        "skip a commit during rebase": "git rebase --skip",
        "abort a rebase": "git rebase --abort"
      },
      "configuration": {
        "set a global username": "git config --global user.name 'Your Name'",
        "set a global email": "git config --global user.email 'you@example.com'",
        "view git configuration": "git config --list",
        "change the default branch name for new repositories": "git config --global init.defaultBranch <branch-name>"
      },
      "use cases": {
        "summary of changes": {
          "List changed files between branches": "git diff --name-only <feature-branch>..origin/<feature-branch>"
        },
        "review": {
          "review recent commits": "git log",
          "show details of a specific commit": "git show <commit-id>",
          "show details of a merge commit": "git show <merge-commit-hash>"
        },
        "undoing changes": {
          "undo the last commit (soft reset)": "git reset --soft HEAD~1",
          "undo the last commit (hard reset)": "git reset --hard HEAD~1",
          "unstage changes": "git reset HEAD <file-path>",
          "discard changes in working directory": "git checkout -- <file-path>"
        }
      }
    }
  }